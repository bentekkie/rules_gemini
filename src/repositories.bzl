"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", _http_archive = "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//src/private:toolchains_repo.bzl", "toolchains_repo")

def http_archive(name, **kwargs):
    maybe(_http_archive, name = name, **kwargs)

_DOC = "Define gemini toolchain"
_ATTRS = {
    "model": attr.string(mandatory = True),
}

def _gemini_repo_impl(repository_ctx):
    api_key = repository_ctx.getenv("GOOGLE_API_KEY")
    random = repository_ctx.execute(["/bin/sh", "-c", "echo $RANDOM"])
    if not api_key:
        fail("Set GOOGLE_API_KEY")
    build_content = """# Generated by @rules_gemini//src/repositories.bzl
load("@rules_gemini//src:toolchain.bzl", "gemini_toolchain")

gemini_toolchain(
    name = "gemini_toolchain",
    model = "%s",
    api_key = "%s",
    random = "%s",
)
""" % (repository_ctx.attr.model, api_key, random.stdout.strip())

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

gemini_repositories = repository_rule(
    _gemini_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
    configure = True,
    environ = ["RANDOM"],
)

# Wrapper macro around everything above, this is the primary API
def gemini_register_toolchains(name, register = True, **kwargs):
    gemini_repositories(
        name = name,
        **kwargs
    )
    if register:
        native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
